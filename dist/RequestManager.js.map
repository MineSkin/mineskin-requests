{"version":3,"file":"RequestManager.js","sourceRoot":"/","sources":["RequestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, CreateAxiosDefaults } from \"axios\";\r\nimport { JobQueue } from \"jobqu\";\r\nimport rateLimit, { rateLimitOptions } from \"axios-rate-limit\";\r\nimport { Time } from \"@inventivetalent/time\";\r\nimport { RequestConfig, RequestKey } from \"./RequestConfig\";\r\nimport { networkInterfaces } from \"os\";\r\nimport * as https from \"node:https\";\r\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\r\nimport { Breadcrumb } from \"@mineskin/types\";\r\nimport { Address4, Address6 } from \"ip-address\";\r\nimport { isPublicNetworkInterface } from \"./util\";\r\nimport * as Sentry from \"@sentry/node\";\r\n\r\nexport const GENERIC = \"generic\";\r\n\r\n\r\nconst MAX_QUEUE_SIZE = 100;\r\nconst TIMEOUT = 10000;\r\n\r\naxios.defaults.headers[\"User-Agent\"] = \"MineSkin\";\r\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers[\"Accept\"] = \"application/json\";\r\naxios.defaults.timeout = TIMEOUT;\r\n\r\nexport class RequestManager {\r\n\r\n    public static IPS: string[] = [];\r\n\r\n    static readonly axiosInstance: AxiosInstance = RequestManager.createAxiosInstance({});\r\n\r\n    protected static readonly defaultRateLimit: rateLimitOptions = {\r\n        maxRequests: 600,\r\n        perMilliseconds: 10 * 60 * 1000\r\n    }\r\n\r\n    private static instances: Map<string, AxiosInstance> = new Map<string, AxiosInstance>();\r\n    private static queues: Map<string, JobQueue<AxiosRequestConfig, AxiosResponse>> = new Map<string, JobQueue<AxiosRequestConfig, AxiosResponse>>();\r\n\r\n    static init() {\r\n        const interfaces = networkInterfaces();\r\n        i: for (let id in interfaces) {\r\n            const iface = interfaces[id];\r\n            a: for (let address of iface) {\r\n                if (!isPublicNetworkInterface(address)) {\r\n                    continue i; // skip interface\r\n                }\r\n\r\n                console.info(`${ address.family } ${ address.address } ${ address.netmask } ${ address.mac } ${ address.cidr }`);\r\n                this.IPS.push(address.address);\r\n            }\r\n        }\r\n\r\n        this.setupInstance(GENERIC, {});\r\n        this.setupQueue(GENERIC, Time.millis(100), 1);\r\n    }\r\n\r\n    static registerInstance<K extends RequestKey>(config: RequestConfig<K>) {\r\n        const key = this.mapKey(config.key);\r\n        if (this.instances.has(key)) {\r\n            console.warn(`Instance with key ${ key } already exists!`);\r\n            return;\r\n        }\r\n        if (this.queues.has(key)) {\r\n            console.warn(`Queue with key ${ key } already exists!`);\r\n            return;\r\n        }\r\n\r\n        if (config?.ip?.bind) {\r\n            const bind = config.ip.bind;\r\n            if (!this.IPS.includes(bind)) {\r\n                console.warn(`IP ${ bind } not found on this machine`);\r\n            } else {\r\n                console.info(`Binding ${ key } to IP ${ bind }`);\r\n                config.request.httpsAgent = new https.Agent({\r\n                    localAddress: config.ip.bind,\r\n                    family: config.ip.bind.includes(\":\") ? 6 : 4\r\n                });\r\n            }\r\n        }\r\n\r\n        if (config.proxy) {\r\n            console.info(`Setting up proxy for ${ key } via ${ config.proxy.host }`);\r\n            config.request.httpsAgent = new HttpsProxyAgent(config.proxy)\r\n        }\r\n\r\n        if (config.rateLimit) {\r\n            this.setupInstance(key, config.request, c => rateLimit(this.createAxiosInstance(c), config.rateLimit));\r\n        } else {\r\n            this.setupInstance(key, config.request);\r\n        }\r\n\r\n        if (config.queue) {\r\n            this.setupQueue(key, config.queue.interval, config.queue.maxPerRun);\r\n        }\r\n    }\r\n\r\n    private static mapKey(key: RequestKey): string {\r\n        if (typeof key === \"string\") {\r\n            return key;\r\n        }\r\n        return JSON.stringify(key);\r\n    }\r\n\r\n    protected static createAxiosInstance(config: CreateAxiosDefaults) {\r\n        const instance = axios.create(config);\r\n        instance.interceptors.response.use((response) => response, (error) => {\r\n            const is429 = error.response?.status === 429;\r\n            console.error(`Error in Axios API, status ${ error.response?.status } ${ is429 ? \"(429)\" : \"\" }`);\r\n            console.error(error.config?.url);\r\n            console.error(JSON.stringify(error.response?.data || error.response, null, 2));\r\n            console.error(JSON.stringify(error.request?.data, null, 2));\r\n            Sentry.captureException(error, {\r\n                level: is429 ? 'fatal' : 'error',\r\n                extra: {\r\n                    responseCode: error.response?.status,\r\n                    endpoint: error.config?.url\r\n                }\r\n            });\r\n            throw error;\r\n        });\r\n        return instance;\r\n    }\r\n\r\n    protected static setupInstance(key: string, config: AxiosRequestConfig, constr: AxiosConstructor = (c) => this.createAxiosInstance(c)) {\r\n        this.instances.set(key, constr(config));\r\n        console.log(\"set up axios instance \" + key);\r\n    }\r\n\r\n    private static setupQueue(key: string, interval: number, maxPerRun: number): void {\r\n        this.queues.set(key, new JobQueue<AxiosRequestConfig, AxiosResponse>(request => {\r\n            return this.runAxiosRequest(request, key);\r\n        }, interval, maxPerRun));\r\n        console.log(\"set up request queue \" + key);\r\n    }\r\n\r\n    protected static async runAxiosRequest(request: AxiosRequestConfig, inst: AxiosInstance | string = this.axiosInstance): Promise<AxiosResponse> {\r\n        let instance: AxiosInstance;\r\n        let instanceKey: string = \"default\";\r\n        if (typeof inst === \"string\") {\r\n            instance = this.instances.get(inst);\r\n            instanceKey = inst;\r\n        } else {\r\n            instance = inst as AxiosInstance;\r\n        }\r\n\r\n        if (!instance) {\r\n            throw new Error(\"No instance found for key \" + inst);\r\n        }\r\n\r\n        let breadcrumb = request.headers?.[\"X-MineSkin-Breadcrumb\"] || \"00000000\";\r\n        console.log(`${ breadcrumb } => ${ request.method } ${ request.url } via ${ instanceKey }`);\r\n\r\n        return instance.request(request);\r\n    }\r\n\r\n    public static async dynamicRequest<K extends RequestKey>(key: K, request: AxiosRequestConfig, breadcrumb?: Breadcrumb): Promise<AxiosResponse> {\r\n        const k = this.mapKey(key);\r\n        const q = this.queues.get(k);\r\n\r\n        if (breadcrumb) {\r\n            request.headers = request.headers || {};\r\n            request.headers[\"X-MineSkin-Breadcrumb\"] = breadcrumb;\r\n        }\r\n\r\n        if (!q) {\r\n            return this.runAxiosRequest(request, k);\r\n            //throw new Error(\"No queue found for key \" + k);\r\n        }\r\n\r\n        if (q.size > MAX_QUEUE_SIZE) {\r\n            console.warn(`${ breadcrumb } Rejecting new request as queue for ${ k } is full (${ q.size })! `);\r\n            throw new Error(\"Request queue is full!\");\r\n        }\r\n        return await q.add(request);\r\n    }\r\n\r\n}\r\n\r\ntype AxiosConstructor = (config: AxiosRequestConfig) => AxiosInstance;\r\n"]}