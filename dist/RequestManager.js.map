{"version":3,"file":"RequestManager.js","sourceRoot":"/","sources":["RequestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { JobQueue } from \"jobqu\";\r\nimport rateLimit, { RateLimitedAxiosInstance, rateLimitOptions } from \"axios-rate-limit\";\r\nimport { Time } from \"@inventivetalent/time\";\r\nimport { RequestConfig, RequestKey } from \"./RequestConfig\";\r\n\r\n\r\nexport const GENERIC = \"generic\";\r\n\r\nconst MAX_QUEUE_SIZE = 100;\r\nconst TIMEOUT = 10000;\r\n\r\naxios.defaults.headers[\"User-Agent\"] = \"MineSkin\";\r\naxios.defaults.headers[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers[\"Accept\"] = \"application/json\";\r\naxios.defaults.timeout = TIMEOUT;\r\n\r\nexport class RequestManager {\r\n\r\n    static readonly axiosInstance: AxiosInstance = axios.create({});\r\n\r\n    protected static readonly defaultRateLimit: rateLimitOptions = {\r\n        maxRequests: 600,\r\n        perMilliseconds: 10 * 60 * 1000\r\n    }\r\n\r\n    private static instances: Map<string, AxiosInstance> = new Map<string, AxiosInstance>();\r\n    private static queues: Map<string, JobQueue<AxiosRequestConfig, AxiosResponse>> = new Map<string, JobQueue<AxiosRequestConfig, AxiosResponse>>();\r\n\r\n    static init() {\r\n        this.setupInstance(GENERIC, {});\r\n        this.setupQueue(GENERIC, Time.millis(100), 1);\r\n    }\r\n\r\n    static registerInstance<K extends RequestKey>(config: RequestConfig<K>) {\r\n        const key = this.mapKey(config.key);\r\n        if (this.instances.has(key)) {\r\n            console.warn(`Instance with key ${ key } already exists!`);\r\n            return;\r\n        }\r\n        if (this.queues.has(key)) {\r\n            console.warn(`Queue with key ${ key } already exists!`);\r\n            return;\r\n        }\r\n\r\n        if (config.rateLimit) {\r\n            this.setupInstance(key, config.request, c => rateLimit(axios.create(c), config.rateLimit));\r\n        } else {\r\n            this.setupInstance(key, config.request);\r\n        }\r\n\r\n        if (config.queue) {\r\n            this.setupQueue(key, config.queue.interval, config.queue.maxPerRun);\r\n        }\r\n    }\r\n\r\n    private static mapKey(key: RequestKey): string {\r\n        if (typeof key === \"string\") {\r\n            return key;\r\n        }\r\n        return JSON.stringify(key);\r\n    }\r\n\r\n    protected static setupInstance(key: string, config: AxiosRequestConfig, constr: AxiosConstructor = (c) => axios.create(c)) {\r\n        this.instances.set(key, axios.create(config));\r\n        console.log(\"set up axios instance \" + key);\r\n    }\r\n\r\n    private static setupQueue(key: string, interval: number, maxPerRun: number): void {\r\n        this.queues.set(key, new JobQueue<AxiosRequestConfig, AxiosResponse>(request => {\r\n            return this.runAxiosRequest(request, key);\r\n        }, interval, maxPerRun));\r\n        console.log(\"set up request queue \" + key);\r\n    }\r\n\r\n    protected static async runAxiosRequest(request: AxiosRequestConfig, inst: AxiosInstance | string = this.axiosInstance): Promise<AxiosResponse> {\r\n        let instance: AxiosInstance;\r\n        if (typeof inst === \"string\") {\r\n            instance = this.instances.get(inst);\r\n        } else {\r\n            instance = inst as AxiosInstance;\r\n        }\r\n\r\n        if (!instance) {\r\n            throw new Error(\"No instance found for key \" + inst);\r\n        }\r\n\r\n        console.log(`=> ${ request.method } ${ request.url }`)\r\n\r\n        return instance.request(request);\r\n    }\r\n\r\n    public static async dynamicRequest<K extends RequestKey>(key: K, request: AxiosRequestConfig): Promise<AxiosResponse> {\r\n        const k = this.mapKey(key);\r\n        const q = this.queues.get(k);\r\n        if (!q) {\r\n            throw new Error(\"No queue found for key \" + k);\r\n        }\r\n\r\n        if (q.size > MAX_QUEUE_SIZE) {\r\n            console.warn(`Rejecting new request as queue for ${ k } is full (${ q.size })! `);\r\n            throw new Error(\"Request queue is full!\");\r\n        }\r\n        return await q.add(request);\r\n    }\r\n\r\n}\r\n\r\ntype AxiosConstructor = (config: AxiosRequestConfig) => AxiosInstance;\r\n"]}